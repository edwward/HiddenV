@page "/hotel-room"

@using Models
@using Business.Repository.IRepository
@inject IHotelRoomRepository HotelRoomRepository
@inject IJSRuntime JSRuntime
@inject HiddenVilla_Server.Service.IService.IFileUpload FileUpload
@inject NavigationManager NavigationManager

<div class="row mt-4>">
    <div class="col-8">
        <h4 class="card-title text-info">Hotel Rooms</h4>
    </div>
    <div class="col-3 offset-1 mb-3">
        <NavLink href="hotel-room/create" class="btn btn-info form-control">Add New Room</NavLink>
    </div>
</div>
<div class="row mt-4>">
    <div class="col-12">
        <table class="table table-bordered table-hover">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Occupancy</th>
                    <th>Rate</th>
                    <th>SqFt</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @if (HotelRooms.Any())
                {
                    foreach (var room in HotelRooms)
                    {
                        <tr>
                            <td>@room.Name</td>
                            <td>@room.Occupancy</td>
                            <td>@room.RegularRate.Value.ToString("c")</td>
                            <td>@room.SqFt</td>
                            <td>
                                <NavLink href="@($"hotel-room/edit/{room.Id}")" class="btn btn-primary">Edit</NavLink>
                                <button class="btn btn-danger" @onclick=" () => HandleDelete(room.Id)">Delete</button>
                            </td>
                        </tr>
                    }
                }
               else
                {
                    <tr>
                        <td colspan="5">No records found</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<DeleteConfirmation IsParentComponentProcessing="IsProcessing" ConfirmationChanged="ConfirmDelete_Click"></DeleteConfirmation>

@code 
{
    private IEnumerable<HotelRoomDto> HotelRooms { get; set; } = new List<HotelRoomDto>();
    private int? DeleteRoomId { get; set; } = null;
    private bool IsProcessing { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        HotelRooms = await HotelRoomRepository.GetAllHotelRooms();
    }

    //Delete kdyz user klikne na beznou delete ikonu
    private async Task HandleDelete(int roomId)
    {
        DeleteRoomId = roomId;
        await JSRuntime.InvokeVoidAsync("ShowDeleteconfirmationModal");
    }

    //delete kdyz user klikne na delete v modalu (delete confimation)
    public async Task ConfirmDelete_Click(bool IsConfirmed)
    {
        IsProcessing = true;
        if (IsConfirmed && DeleteRoomId != null)
        {
            //delete all images in hotel room
            HotelRoomDto hotelroom = await HotelRoomRepository.GetHotelRoom(DeleteRoomId.Value);
            foreach (var image in hotelroom.HotelRoomImages)
            {
                var imageName = image.RoomImageUrl.Replace($"{NavigationManager.BaseUri}RoomImages/", "");
                FileUpload.DeleteFile(imageName);
            }

            await HotelRoomRepository.DeleteHotelRoom(DeleteRoomId.Value);
            await JSRuntime.ToastrSuccess("Hotel Room Deleted");
            HotelRooms = await HotelRoomRepository.GetAllHotelRooms();
        }
        //bootstrap modal go away kdyz dojde k delete room
        await JSRuntime.InvokeVoidAsync("HideDeleteconfirmationModal");
        IsProcessing = false;
    }
}
