@page "/blazorjs"

@*javascript knihovna kterou musim pouzit chci-li pouzit js*@
@inject IJSRuntime JsRuntime 

<h3>BlazorJs</h3>

<div class="row">
    <button class="btn btn-secondary col-3 m-2"  @onclick="(() => TestConfirm(ConfirmMessage))">Test confirm</button>
    <button class="btn btn-success col-3 m-2"  @onclick="TestSuccess">Test success</button>
    <button class="btn btn-danger col-3 m-2"  @onclick="TestFailure">Test failure</button>
</div>
<div class="row">
    <button class="btn btn-success col-3 m-2"  @onclick="TestSuccessSwal">Test success sweet alert</button>
    <button class="btn btn-danger col-3 m-2"  @onclick="TestFailureSwal">Test failure sweet alert</button>
</div>

<div class="row">
   @if (ConfirmResult)
    {
        <p>Confirmation has been made!</p>
    } 
    else
    {
        <p>Confirmation pending!</p>
    }
</div>

@code 
{
    private string ConfirmMessage = "Do you really want to click?";
    private bool ConfirmResult { get; set; }

    private async Task TestConfirm(string message)
    {
        ConfirmResult = await JsRuntime.InvokeAsync<bool>("confirm", message);
    }

    //test toastr js messages
    private async Task TestSuccess()
    {
        await JsRuntime.ToastrSuccess("success");
    }

    private async Task TestFailure()
    {
        await JsRuntime.ToastrError("error");
    }

    private async Task TestSuccessSwal()
    {
        await JsRuntime.InvokeVoidAsync("ShowSwal", "success", "task completed");
    }

    private async Task TestFailureSwal()
    {
        await JsRuntime.InvokeVoidAsync("ShowSwal", "error", "task failed");
    }
}
